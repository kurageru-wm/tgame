(use tui)
(use tgame)
(use AI)
(use srfi-42)
(use srfi-11)

;; Task Manager
(define *tm* (make <task-manager>))

;; Key Event
(define *key-events* (make <events> 'eqv?))

;; Map
(define *map*
  (list-ec (: i 30) (make-string 130 #\.))
  )

;; (define pat (make <pattern>))
;; (build-path-segment! pat 5 5 10 10)
;; (build-path-segment! pat 10 10 14 9)
;; (build-path-segment! pat 14 9 20 3)
;; (build-path-segment! pat 20 3 5 5)
;; (set! pat (pattern-of pat))


;; (define (pattern-move predator)
;;   (movech predator (cdr (car pat)) (car (car pat)))
;;   (set! pat (cdr pat)))

;; (define (chase predator pey)
;;   (stepch predator
;;           (if (> (y-of predator) (y-of (car pey)))
;;               -1
;;               1)
;;           (if (> (x-of predator) (x-of (car pey)))
;;               -1
;;               1)
;;           ))

;; (define (evade predator pey)
;;   (mystep predator
;;           (if (> (y-of predator) (y-of pey))
;;               1
;;               -1)
;;           (if (> (x-of predator) (x-of pey))
;;               1
;;               -1)
;;           (lambda () (string-ref (list-ref *map* (y-of pey)) (x-of pey)))
;;           ))
        



(define (update-pre ch y x)
  (let-values (((wy wx) (getwinyx))
               ((cy cx) (getchyx ch)))
    (if (and (< 0 (+ cy y) (- wy 1))
             (< 0 (+ cx x) (- wx 1)))
        (begin
          (set! (x-of ch) (+ (x-of ch) x))
          (set! (y-of ch) (+ (y-of ch) y)))        
        #f)    
    ))


(define (main args)
  ;; Initialize
  (init-tui)

  ;; Load Map
  (load-map *map*)

  ;; Create Color
  (init_pair 1 COLOR_CYAN COLOR_BLACK)
  (init_pair 2 COLOR_RED COLOR_BLACK)

  ;; Add Tasks
  (add-task *tm*
            (make <task>
              :id 0
              :obj (make <cobject> :ch #\@ :x 10 :y 10 :attr `(,A_BOLD ,(COLOR_PAIR 1)))
              ))
  (add-task *tm*
            (make <task>
              :id 1
              :obj (make <cobject> :ch #\E :x 20 :y 20 :attr `(,A_BOLD ,(COLOR_PAIR 2)))
              ))
  
  ;; (set! pey (make <cobject> :ch #\@ :x 10 :y 10 :attr `(,A_BOLD ,(COLOR_PAIR 1))))
  ;; (set! predator (make <cobject> :ch #\P :x 50 :y 20 :attr `(,A_BOLD ,(COLOR_PAIR 2))))

  ;; (add-strategy predator 'chase chase)

  ;; (setch pey)
  ;; (setch predator)

  ;; Add Key Event
  (let1 proc
        (lambda () (string-ref
                    (list-ref *map* (y-of (obj-of (get-task *tm* 0))))
                    (x-of (obj-of (get-task *tm* 0)))))
        (add-event *key-events* (x->number #\j)
                   (lambda (args) (update-pre (obj-of (get-task *tm* 0)) 1 0)))
        (add-event *key-events* (x->number #\k)
                   (lambda (args) (update-pre (obj-of (get-task *tm* 0)) -1 0)))
        (add-event *key-events* (x->number #\l)
                   (lambda (args) (update-pre (obj-of (get-task *tm* 0)) 0 1)))
        (add-event *key-events* (x->number #\h)
                   (lambda (args) (update-pre (obj-of (get-task *tm* 0)) 0 -1)))
        )
  
  ;; (display-info pey)
  ;; (display-info predator)

  (let loop ((c (getch)))
    ;; Pey
    (*key-events* c)

    ;; Predator
    ;; (command predator 'chase pey)
    ;; (pattern-move predator)
    
    (draw-box)
    (draw *tm*)
    
    ;; (mvprintw 0 0 "%3d:%3d" (x-of (obj-of (get-task *tm* 0))) (y-of pey))
    ;; (mvprintw 0 20 "%3d:%3d" (x-of predator) (y-of predator))

    (unless (= (x->number #\q) c)
            (loop (getch))
            )
    )  

  (getch)
  (endwin)
  )


  